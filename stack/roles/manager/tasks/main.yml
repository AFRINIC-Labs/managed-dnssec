---
# tasks file for swarm
  - name: Upgrade all packages
    become: true
    apt:
      name: "*"
      state: latest
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

  - name: Upgrade all packages
    become: true
    yum:
      name: "*"
      state: latest
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

  - name: Uninstall old versions
    become: true
    package:
      name:
        - docker 
        - docker-client
        - docker-client-latest
        - docker-common
        - docker-latest
        - docker-latest-logrotate
        - docker-logrotate
        - docker-engine    
      state: absent  

  - name: Prepare the server
    become: true
    yum:
      name:
        - yum-utils 
        - device-mapper-persistent-data
        - lvm2
        - python-pip   
      state: present  
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

  - name: Prepare the server
    become: true
    apt:
      name:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common
      state: present  
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'


  - name: Add Docker GPG Key
    become: true
    apt_key:
      id: 0EBFCD88
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present  
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'


  - name: Add new repository
    shell: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    register: data
    become: true
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

  - name: Add new repository
    apt_repository:
      repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu  {{ ansible_distribution_release }} stable"
      state: present
    register: data
    become: true
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

  - name: Install iptables
    become: true
    yum:
      name:
        - iptables-services
      state: present
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

  - name: Install iptables
    become: true
    apt:
      name:
        - iptables
      state: present
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'


  - name: Disable firewalld
    become: true
    systemd:
      state: stopped
      name: firewalld
      enabled: no 
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

    
  - name: Enable iptables
    become: true
    systemd:
      state: started
      name: iptables
      enabled: yes
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'


  - name: Install docker
    become: true
    package:
      name:
        - docker-ce
        - docker-ce-cli
        - containerd.io   
      state: present  
    

  - name: Enable docker
    become: true
    systemd:
      state: started
      name: docker
      enabled: yes 

  - name: Docker SDK for Python
    become: true
    pip:
      name: 
        - docker
        - docker-compose
        - jsondiff

  - name: Init swarm
    become: true
    docker_swarm:
      state: present
    when: "'managers' in group_names"

  - name: Install compose
    become: true
    get_url:
      url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-{{ docker_compose_os }}-{{ docker_compose_arch }}"
      dest: /usr/local/bin/docker-compose
      mode: '0755'

  - name: Add user to docker group
    user:
      name: "{{ ansible_ssh_user }}"
      append: yes
      groups: docker
    become: true

  - name: Add registry url to hosts
    lineinfile:
      path: /etc/hosts
      line: "127.0.0.1 {{ private_registry }}"
      state: present
      backup: yes
    become: true

  - name: Add local registry service
    become: true
    docker_swarm_service:
      name: "{{ private_registry_service }}"
      image: "{{ private_registry_image }}"
      publish:
        - published_port: "{{ private_registry_port_published }}"
          target_port: "{{ private_registry_port_target }}"
      mounts:
        - source: "{{ private_registry_volume }}"
          target: /var/lib/registry
          type: volume
      reservations:
        cpus: '{{ private_registry_resources.reservations.cpus }}'
        memory: '{{ private_registry_resources.reservations.memory }}'
      limits:
        cpus: '{{ private_registry_resources.limits.cpus }}'
        memory: '{{ private_registry_resources.limits.memory }}'

  - name: Copy management folder
    copy:
      src: files/management
      dest: "{{ remote_dst_path }}"
      owner: "{{ ansible_ssh_user }}"
      group: "{{ ansible_ssh_user }}"
      mode: u=rw,g=r,o=r

  - name: Set execution on docker-entrypoint.sh (myslq-master) for management
    file:
      path: "{{ remote_dst_path }}/management/mysql/docker-entrypoint.sh"
      owner: "{{ ansible_ssh_user }}"
      group: "{{ ansible_ssh_user }}"
      mode: '755'

  - name: Set execution on healthcheck.sh (myslq-master) for management
    file:
      path: "{{ remote_dst_path }}/management/mysql/healthcheck.sh"
      owner: "{{ ansible_ssh_user }}"
      group: "{{ ansible_ssh_user }}"
      mode: '755'

  - name: Set execution on docker-entrypoint.sh (myslq-slave) for management
    file:
      path: "{{ remote_dst_path }}/management/mysql_slave/docker-entrypoint.sh"
      owner: "{{ ansible_ssh_user }}"
      group: "{{ ansible_ssh_user }}"
      mode: '755'

  - name: Set execution on healthcheck.sh (myslq-slave) for management
    file:
      path: "{{ remote_dst_path }}/management/mysql_slave/healthcheck.sh"
      owner: "{{ ansible_ssh_user }}"
      group: "{{ ansible_ssh_user }}"
      mode: '755'

  - name: Create docker-compose file
    template:
      src: docker-compose.yml.j2
      dest: "{{ remote_dst_path }}/management/docker-compose.yml"
      owner: "{{ ansible_ssh_user }}"
      group: "{{ ansible_ssh_user }}"
      mode: u=rw,g=r,o=r

  - name: Install openssl-certificate requirements
    become: true
    pip:
      name:
        - pyOpenSSL

  - name: Generate 2048 bits DH Parameters
    openssl_dhparam:
      path: "{{ remote_dst_path }}/management/nginx/dhparam.pem"
      size: 2048

  - name: Generate an OpenSSL RSA 2048 bits private key (default is 4096 bits)
    openssl_privatekey:
      path: "{{ remote_dst_path }}/management/nginx/nginx.key"
      size: 2048

  - name: Generate an OpenSSL Certificate Signing Request
    openssl_csr:
      path: "{{ remote_dst_path }}/management/nginx/nginx.csr"
      privatekey_path: "{{ remote_dst_path }}/management/nginx/nginx.key"
      common_name: "{{ tls_common_name }}"

  - name: Generate a Self Signed OpenSSL certificate
    openssl_certificate:
      path: "{{ remote_dst_path }}/management/nginx/nginx.crt"
      privatekey_path: "{{ remote_dst_path }}/management/nginx/nginx.key"
      csr_path: "{{ remote_dst_path }}/management/nginx/nginx.csr"
      selfsigned_not_after: "+365d"
      provider: selfsigned

  - name: Copy stack folder
    copy:
      src: files/stack
      dest: "{{ remote_dst_path }}"
      owner: "{{ ansible_ssh_user }}"
      group: "{{ ansible_ssh_user }}"
      mode: u=rw,g=r,o=r

  - name: Set execution on docker-entrypoint.sh for stack
    file:
      path: "{{ remote_dst_path }}/stack/mysql/docker-entrypoint.sh"
      owner: "{{ ansible_ssh_user }}"
      group: "{{ ansible_ssh_user }}"
      mode: '755'

  - name: Set execution on healthcheck.sh for stack
    file:
      path: "{{ remote_dst_path }}/stack/mysql/healthcheck.sh"
      owner: "{{ ansible_ssh_user }}"
      group: "{{ ansible_ssh_user }}"
      mode: '755'

  - name: Set execution on pdns_entry.sh for stack
    file:
      path: "{{ remote_dst_path }}/stack/pdns/pdns_entry.sh"
      owner: "{{ ansible_ssh_user }}"
      group: "{{ ansible_ssh_user }}"
      mode: '755'

  - name: Create docker-compose-template file
    template:
      src: docker-compose-template.yml.j2
      dest: "{{ remote_dst_path }}/stack/docker-compose-template.yml"
      owner: "{{ ansible_ssh_user }}"
      group: "{{ ansible_ssh_user }}"
      mode: u=rw,g=r,o=r

  - name: Prepare api stack (create Network)
    docker_network:
      name: "{{ replication_net }}"
      state: present
      driver: overlay
      scope: swarm
      attachable: yes

  - name: Prepare api stack (build)
    docker_compose:
      project_src: "{{ remote_dst_path }}/management"
      state: present
      build: yes 
      stopped: no

  - name: Prepare api stack (down)
    docker_compose:
      project_src: "{{ remote_dst_path }}/management"
      state: absent
      stopped: true
      remove_volumes: yes

  - name: Prepare api stack (push Mysql Master)
    docker_image:
      name: "{{ private_registry }}:{{ private_registry_port }}/{{ mysql_server_master }}:{{ mysql_server_master_tag }}"
      repository: "{{ private_registry }}:{{ private_registry_port }}/{{ mysql_server_master }}:{{ mysql_server_master_tag }}"
      push: yes
      #force_source: yes
      source: local

  - name: Prepare api stack (push Mysql Slave)
    docker_image:
      name: "{{ private_registry }}:{{ private_registry_port }}/{{ mysql_server_slave }}:{{ mysql_server_slave_tag }}"
      repository: "{{ private_registry }}:{{ private_registry_port }}/{{ mysql_server_slave }}:{{ mysql_server_slave_tag }}"
      push: yes
      #force_source: yes
      source: local

  - name: Prepare api stack (push SignerApi)
    docker_image:
      name: "{{ private_registry }}:{{ private_registry_port }}/{{ signer_api }}:{{ signer_api_tag }}"
      repository: "{{ private_registry }}:{{ private_registry_port }}/{{ signer_api }}:{{ signer_api_tag }}"
      push: yes
      #force_source: yes
      source: local

  - name: Prepare api stack (push Nginx)
    docker_image:
      name: "{{ private_registry }}:{{ private_registry_port }}/{{ nginx_api }}:{{ nginx_api_tag }}"
      repository: "{{ private_registry }}:{{ private_registry_port }}/{{ nginx_api }}:{{ nginx_api_tag }}"
      push: yes
      #force_source: yes
      source: local

  - name: Deploy api stack
    docker_stack:
      state: present
      name: "{{ management_api }}"
      compose:
        - "{{ remote_dst_path }}/management/docker-compose.yml"